{"version":3,"sources":["components/AddCategory.js","helper/getGifts.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4LAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,MAAU,CAACP,MACzBC,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,8BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAACC,GAAS,IAAD,EAC5B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,qBAAKc,UAAU,2DAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,UCHPO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAUtB,ECZwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAACd,GACHY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAGtB,CAACpB,IAEGqB,EDLyBI,CAAazB,GAAhCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACI,qCACI,6BAAI,mBAAGJ,UAAU,oCAAb,SAAkDhB,MACrDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,WAAf,SAEYH,EAAOJ,KAAI,SAACiB,GAER,OAAO,cAAC,EAAD,eAECA,GADCA,EAAMf,aEvB9BgB,EAAe,WAGxB,MAAoCzC,mBAAS,IAA7C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEI2C,EAAWnB,KAAI,SAACT,GACZ,OAAO,cAAC,EAAD,CAA0BA,SAAUA,GAArBA,Y,MClB1C6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.86951a41.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);        \r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories((cats) => [inputValue]);//, ...cats, ]);\r\n            setInputValue('');\r\n        }        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange = { handleInputChange }\r\n            />            \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=aIy5lDZ3l5zCWJPJhZBKmdvb0tuRVnj4`;\r\n    const response = await fetch(url);                \r\n    const {data} = await response.json();     \r\n                  \r\n    const gifs = data.map( (img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    //setImages( gifs );\r\n    return gifs;\r\n}    \r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\r\n            <div className=\"container\">\r\n                <img src={url} alt={title} />\r\n                <p>{title}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // //Sirve para evitar que se vuelta a ejecutar el llamado a la funcion que trae los datos de la api.\r\n    // useEffect(() => {\r\n    //     getGifs( category )\r\n    //         .then((img) => setImages(img));\r\n    // }, [category]);\r\n    \r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h2><b className=\"animate__animated animate__fadeIn\">{category}</b></h2>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n            <div className=\"cardGrid\">              \r\n                    {\r\n                        images.map((image) => {\r\n                            // return <li key={ image.id }>{ image.title }</li>\r\n                            return <GifGridItem\r\n                                key={image.id}\r\n                                {...image} />\r\n                        })\r\n                    }                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { getGifs } from \"../helper/getGifts\";\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then((img) => {\r\n                setState({\r\n                    data: img,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState([])\r\n\r\n    // const handleAdd = () => {       \r\n    //     //setCategories([...categories, 'New Item' + categories.length + 1]);     \r\n    //     setCategories( (cats) => [...cats, 'New Item' + cats.length + 1]);     \r\n    // };\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= { setCategories }/>\r\n            <hr></hr>\r\n            \r\n            <ol>\r\n            {\r\n                categories.map((category) => {\r\n                    return <GifGrid key={ category } category={category}/> \r\n                    // return <li key={ category }> {category} </li>\r\n                })\r\n            }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nimport './index.css';\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}